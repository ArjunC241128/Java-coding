import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Calculator extends JFrame implements ActionListener {
    private JButton delBtn, clearBtn;
    private JButton[] NumberBtn;
    private JButton[] functionBtn;
    private JButton Add_btn, Sub_btn, Mul_btn, Div_btn, Mod_btn, equalBtn, decBtn;
    private JPanel panel;
    private JTextField text;
    private JMenuBar menuBar;
    private JMenuItem fullScreenItem;
    private boolean isFullScreen = false;

    private String expression = "";
    private boolean justEvaluated = false;

    public Calculator() {
        initialize();
    }

    private void initialize() {
        this.setSize(new Dimension(300, 450));
        this.setLayout(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setResizable(true);


        menuBar = new JMenuBar();

        fullScreenItem = new JMenuItem("Toggle Full Screen");
        fullScreenItem.addActionListener(this);

        this.setJMenuBar(menuBar);

        text = new JTextField();
        text.setSize(new Dimension(250, 40));
        text.setLocation(new Point(20, 20));
        text.setFont(new Font("Orbitron", Font.PLAIN, 20));
        text.setEditable(false);
        text.setForeground(Color.black);
        text.setHorizontalAlignment(JTextField.RIGHT);

        panel = new JPanel();
        panel.setLayout(new GridLayout(5, 4));
        panel.setSize(new Dimension(250, 280));
        panel.setLocation(new Point(20, 70));

        Add_btn = new JButton("+");
        Sub_btn = new JButton("-");
        Mul_btn = new JButton("*");
        Div_btn = new JButton("/");
        Mod_btn = new JButton("%");
        equalBtn = new JButton("=");
        decBtn = new JButton(".");
        clearBtn = new JButton("CE");
        delBtn = new JButton("CLR");

        functionBtn = new JButton[] {
                Add_btn, Sub_btn, Mul_btn, Div_btn, Mod_btn, equalBtn, delBtn, clearBtn, decBtn
        };

        for (JButton btn : functionBtn) {
            btn.setFocusable(false);
            btn.setFont(new Font("Orbitron", Font.PLAIN, 20));
            btn.addActionListener(this);
        }

        NumberBtn = new JButton[10];
        for (int i = 0; i < 10; i++) {
            NumberBtn[i] = new JButton(String.valueOf(i));
            NumberBtn[i].setFocusable(false);
            NumberBtn[i].setFont(new Font("Orbitron", Font.PLAIN, 20));
            NumberBtn[i].addActionListener(this);
        }


        panel.add(NumberBtn[7]);
        panel.add(NumberBtn[8]);
        panel.add(NumberBtn[9]);
        panel.add(Add_btn);

        panel.add(NumberBtn[4]);
        panel.add(NumberBtn[5]);
        panel.add(NumberBtn[6]);
        panel.add(Sub_btn);

        panel.add(NumberBtn[1]);
        panel.add(NumberBtn[2]);
        panel.add(NumberBtn[3]);
        panel.add(Mul_btn);

        panel.add(NumberBtn[0]);
        panel.add(decBtn);
        panel.add(equalBtn);
        panel.add(Div_btn);

        panel.add(Mod_btn);
        panel.add(delBtn);
        panel.add(clearBtn);
        panel.add(new JLabel()); // empty cell

        this.add(text);
        this.add(panel);
        this.setVisible(true);
        this.setLocationRelativeTo(null);
    }

    private boolean isOperator(char c) {
        return "+-*/%".indexOf(c) != -1;
    }

    private double evaluateExpression(String expr) {
        try {
            if (expr.contains("+")) {
                String[] parts = expr.split("\\+");
                return Double.parseDouble(parts[0]) + Double.parseDouble(parts[1]);
            } else if (expr.contains("-")) {
                String[] parts = expr.split("-");
                return Double.parseDouble(parts[0]) - Double.parseDouble(parts[1]);
            } else if (expr.contains("*")) {
                String[] parts = expr.split("\\*");
                return Double.parseDouble(parts[0]) * Double.parseDouble(parts[1]);
            } else if (expr.contains("/")) {
                String[] parts = expr.split("/");
                return Double.parseDouble(parts[0]) / Double.parseDouble(parts[1]);
            } else if (expr.contains("%")) {
                String[] parts = expr.split("%");
                return Double.parseDouble(parts[0]) % Double.parseDouble(parts[1]);
            }
            return Double.parseDouble(expr);
        } catch (Exception e) {
            return Double.NaN;
        }
    }

    private void toggleFullScreen() {
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice device = env.getDefaultScreenDevice();

        if (!isFullScreen) {

            this.dispose();
            this.setUndecorated(true);
            device.setFullScreenWindow(this);
            this.setVisible(true);
            isFullScreen = true;
        }
        else {
            this.dispose();
            this.setUndecorated(false);
            device.setFullScreenWindow(null);
            this.setSize(new Dimension(300, 450));
            this.setLocationRelativeTo(null);
            this.setVisible(true);
            isFullScreen = false;
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == fullScreenItem) {
            toggleFullScreen();
            return;
        }

        for (int i = 0; i < 10; i++) {
            if (e.getSource() == NumberBtn[i]) {
                if (justEvaluated) {
                    expression = "";
                    justEvaluated = false;
                }
                expression += i;
                text.setText(expression);
                return;
            }
        }
        if (e.getSource() == decBtn) {
            if (justEvaluated) {
                expression = "";
                justEvaluated = false;
            }
            if (expression.isEmpty() || isOperator(expression.charAt(expression.length() - 1))) {
                expression += "0.";
            }
            else if (!expression.contains(".") ||
                    (expression.lastIndexOf(".") < expression.lastIndexOf("+") ||
                            expression.lastIndexOf(".") < expression.lastIndexOf("-") ||
                            expression.lastIndexOf(".") < expression.lastIndexOf("*") ||
                            expression.lastIndexOf(".") < expression.lastIndexOf("/") ||
                            expression.lastIndexOf(".") < expression.lastIndexOf("%"))) {
                expression += ".";
            }
            text.setText(expression);
            return;
        }
        if (e.getSource() == delBtn) {
            if (!expression.isEmpty()) {
                expression = expression.substring(0, expression.length() - 1);
                text.setText(expression);
            }
            return;
        }
        if (e.getSource() == clearBtn) {
            expression = "";
            text.setText("");
            return;
        }
        if (e.getSource() == equalBtn) {
            try {
                if (!expression.isEmpty() && !isOperator(expression.charAt(expression.length() - 1))) {
                    double result = evaluateExpression(expression);
                    if (!Double.isNaN(result)) {
                        text.setText(expression + " = " + result);
                        expression = String.valueOf(result);
                        justEvaluated = true;
                    }
                    else {
                        text.setText("Error");
                        expression = "";
                    }
                }
            } catch (Exception ex) {
                text.setText("Error");
                expression = "";
            }
            return;
        }
        JButton[] ops = { Add_btn, Sub_btn, Mul_btn, Div_btn, Mod_btn };
        char[] opsChar = { '+', '-', '*', '/', '%' };

        for (int i = 0; i < ops.length; i++) {
            if (e.getSource() == ops[i]) {
                if (expression.isEmpty()) {
                    if (opsChar[i] == '-') {
                        expression = "-";
                        text.setText(expression);
                    }
                    return;
                }

                char lastChar = expression.charAt(expression.length() - 1);
                if (isOperator(lastChar)) {
                    expression = expression.substring(0, expression.length() - 1) + opsChar[i];
                }
                else {
                    expression += opsChar[i];
                }
                justEvaluated = false;
                text.setText(expression);
                return;
            }
        }
    }

    public static void main(String[] args) {
        new Calculator();
    }
}
